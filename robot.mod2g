use robot as knowledge.
use robot as actionspec.
exit=nogoals.

module main {


	
	
	
	if a-goal(returnBlock(Block)), bel(takenFrom(Block,Room)), bel(in(Room)) then putDown + drop(returnBlock(Block)).
	
	if a-goal(returnBlock(Block)), bel(takenFrom(Block,Room)), bel(visited(Room)) then goTo(Room).
	
	
	forall bel(block(Block,Room)), bel(color(Block,Color)), bel(in(Room)), bel(not(sentMessage(Room))) 
		do allother.send(block(Block,Room)) + allother.send:(color(Block,Color)) + insert(sentMessage(Room)).	
	
	

	if a-goal(currentColor(Color)), bel(not(holding(Block))), bel(block(Block,Room)), bel(color(Block,Color)), bel(in('DropZone')), bel(visited(Room)) then goTo(Room).
	
	% When agent holds nothing and is near a block with the right color, it will pick the block up.
	if a-goal(deliverBlock(Block)), bel(not(holding(_))) then pickUp(Block) + allother.send(pickedUp(Block)).
	
	% When agent sees a block in a room with the right color but is not near it, it will go to the block.
	if a-goal(atBlock(Block)), bel(not(holding(_))) then goToBlock(Block).
	
	% When agent is in DropZone while holding the right block, it will put the block down and drop the goal of bringing that block to the DropZone.
	if a-goal(deliverBlock(Block)), bel(color(Block,Color)), bel(in('DropZone')) then putDown + insert(deliverBlock(Block))+ drop(currentColor(Color)).
	
	% When agent holds the right block but isn't in DropZone, it will go to DropZone.
	if a-goal(deliverBlock(Block)), bel(not(in('DropZone'))), bel(holding(Block)) then goTo('DropZone').
	
	% Go to every room.
	if a-goal(in(Place)), bel(room(Place), not(visited(Place)), not(in(Place))) then goTo(Place).
	
		
	
}
