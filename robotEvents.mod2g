use robot as knowledge.

module robotEvents {

	% Update the agent's state of movement.
	forall bel( state(State)), percept(state(NewState))
		do delete( state(State) ) + insert( state(NewState) ).

	% Record when we are entering or leaving a room.
	forall percept(in(Room)) do insert( in(Room) ) + drop(inVisited(Room)).
	forall percept(not(in(Room))) do delete( in(Room)) + insert(visited(Room)).


	% Exercise 2.1b: insert rules for handling percepts other than "sendonce" percepts.

	% Update the agent's place.
	if percept(at(Place)) then insert(at(Place)).

	% If in reach of block, agent beliefs atBlock. When not in reach, belief is deleted.
	forall percept(atBlock(Block)) do insert(atBlock(Block)).
	forall percept(not(atBlock(Block))) do delete(atBlock(Block)).

	% For all blocks that are in a room where the agent is, add the color and room of these blocks to the belief base.
	forall percept(color(Block,Color)), bel(in(Room))
		do insert(color(Block,Color)) + insert(block(Block,Room)).

	% If holding a block, agent adds holding(Block) to belief base.
	forall percept(holding(Block)) do insert(holding(Block)).
	forall percept(not(holding(Block))) do delete(holding(Block)).

	% States the index of the currently needed color in the sequence.
	if bel(not(sequenceIndex(OldInteger))), percept(sequenceIndex(Integer)) then insert(sequenceIndex(Integer)).

	% Updates sequenceindex
	if bel(sequenceIndex(Integer)), percept(sequenceIndex(NewInteger))
		then delete(sequenceIndex(Integer)) + insert(sequenceIndex(NewInteger)).

	% Drops all unvisited in(Room) goals if the sequenceIndex hits 6 ie: no more colors left
	forall goal(in(Room)), bel(not(visited(Room))), bel(sequenceIndex(6))  do drop (in(Room)).

	% Adopt the goal for current color in the sequence.
	if bel(nextColorInSeq(Color)) then adopt(currentColor(Color)).

	% Removes the belief of block in a room that the agent is holding
	if bel(holding(Block)), bel(block(Block,Room)) then delete(block(Block,Room)).










}
